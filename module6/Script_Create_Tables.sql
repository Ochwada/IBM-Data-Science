CREATE schema HR;

use hr; 

drop table departments;
drop table employees;
drop table jobs;
drop table jobshistory;
drop table locations;

CREATE TABLE EMPLOYEES (
    EMP_ID CHAR(9) NOT NULL,
    F_NAME VARCHAR(15) NOT NULL,
    L_NAME VARCHAR(15) NOT NULL,
    SSN CHAR(9),
    B_DATE DATE,
    SEX CHAR,
    ADDRESS VARCHAR(30),
    JOB_ID CHAR(9),
    SALARY DECIMAL(10 , 2 ),
    MANAGER_ID CHAR(9),
    DEP_ID CHAR(9) NOT NULL,
    PRIMARY KEY (EMP_ID)
);
                            
CREATE TABLE JOB_HISTORY (
    EMPL_ID CHAR(9) NOT NULL,
    START_DATE DATE,
    JOBS_ID CHAR(9) NOT NULL,
    DEPT_ID CHAR(9),
    PRIMARY KEY (EMPL_ID , JOBS_ID)
);
 
CREATE TABLE JOBS (
    JOB_IDENT CHAR(9) NOT NULL,
    JOB_TITLE VARCHAR(30),
    MIN_SALARY DECIMAL(10 , 2 ),
    MAX_SALARY DECIMAL(10 , 2 ),
    PRIMARY KEY (JOB_IDENT)
);

CREATE TABLE DEPARTMENTS (
    DEPT_ID_DEP CHAR(9) NOT NULL,
    DEP_NAME VARCHAR(15),
    MANAGER_ID CHAR(9),
    LOC_ID CHAR(9),
    PRIMARY KEY (DEPT_ID_DEP)
);

CREATE TABLE LOCATIONS (
    LOCT_ID CHAR(9) NOT NULL,
    DEP_ID_LOC CHAR(9) NOT NULL,
    PRIMARY KEY (LOCT_ID , DEP_ID_LOC)
);

# String Pattern

SELECT * FROM employees;

SELECT * #F_NAME, L_NAME
FROM employees
WHERE ADDRESS LIKE '%Elgin,IL%';

SELECT F_NAME, L_NAME
FROM employees
WHERE B_DATE LIKE '197%';

SELECT *
FROM employees
WHERE (salary BETWEEN 60000 AND 70000) AND DEP_ID = 5;

SELECT F_NAME, L_NAME, DEP_ID
FROM employees
ORDER BY DEP_ID DESC, L_NAME DESC;

SELECT DEP_ID, COUNT(*)
FROM EMPLOYEES
GROUP BY DEP_ID;

SELECT DEP_ID, COUNT(*), AVG(SALARY)
FROM EMPLOYEES
GROUP BY DEP_ID;

SELECT DEP_ID, COUNT(*) AS "NUM_EMPLOYEES ", AVG(SALARY) AS "AVG_SALARY"
FROM EMPLOYEES
GROUP BY DEP_ID;

SELECT DEP_ID, COUNT(*) AS "NUM_EMPLOYEES ", AVG(SALARY) AS "AVG_SALARY"
FROM EMPLOYEES
GROUP BY DEP_ID
ORDER BY AVG_SALARY;

SELECT DEP_ID, COUNT(*) AS "NUM_EMPLOYEES ", AVG(SALARY) AS "AVG_SALARY"
FROM EMPLOYEES
GROUP BY DEP_ID
HAVING COUNT(*) < 4
ORDER BY AVG_SALARY;


SELECT * 
FROM employees;

SELECT F_NAME, L_NAME 
FROM employees
WHERE F_NAME LIKE 'S%';

SELECT *
FROM employees
ORDER BY B_DATE ASC;

SELECT DEP_ID, AVG(SALARY) AS 'AVG_SALARY'
FROM employees
GROUP BY DEP_ID
HAVING AVG_SALARY >= 60000;

SELECT DEP_ID, AVG(SALARY) AS 'AVG_SALARY'
FROM employees
GROUP BY DEP_ID
HAVING AVG_SALARY >= 60000
ORDER BY AVG_SALARY DESC;

# -------- Hands-on Lab: Working with Multiple Tables ----------
### 1: Retrieve only the EMPLOYEES records corresponding to jobs in the JOBS table. (JOB ID)

SELECT * FROM employees  
WHERE JOB_ID IN ( SELECT JOB_IDENT
					FROM jobs);
			# ---------  OR -------
SELECT *
FROM EMPLOYEES, JOBS
WHERE EMPLOYEES.JOB_ID = JOBS.JOB_IDENT;


### 2. Retrieve JOB information for employees earning over $70,000

SELECT  JOB_TITLE, MIN_SALARY, MAX_SALARY, JOB_IDENT
FROM jobs
WHERE JOB_IDENT IN ( SELECT JOB_ID FROM employees
					WHERE SALARY > 70000);

SELECT *
FROM EMPLOYEES E, JOBS J
WHERE E.JOB_ID = J.JOB_IDENT;

SELECT EMP_ID,F_NAME,L_NAME, JOB_TITLE
FROM EMPLOYEES E, JOBS J
WHERE E.JOB_ID = J.JOB_IDENT;

SELECT E.EMP_ID, E.F_NAME, E.L_NAME, J.JOB_TITLE
FROM EMPLOYEES E, JOBS J
WHERE E.JOB_ID = J.JOB_IDENT;

## Practice problems
SELECT * FROM jobs;
SELECT * FROM employees;

# 1. Retrieve only the list of employees whose JOB_TITLE is Jr. Designer.
 
SELECT EMP_ID, F_NAME, L_NAME, JOB_ID
FROM EMPLOYEES 
WHERE JOB_ID IN ( SELECT JOB_IDENT FROM jobs
				WHERE JOB_TITLE = 'Jr. Designer');
	 #  OR -  Using Implicit Joins 
SELECT *
FROM EMPLOYEES E, JOBS J
WHERE E.JOB_ID = J.JOB_IDENT AND J.JOB_TITLE= 'Jr. Designer';

                            